<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WinForm-处理未处理的异常</title>
      <link href="/2020/02/19/S%EF%BC%9A%E7%BC%96%E7%A8%8B-CSharp-Winform%E3%80%90Winform-%E5%A4%84%E7%90%86%E6%9C%AA%E5%A4%84%E7%90%86%E7%9A%84%E5%BC%82%E5%B8%B8%E3%80%91/"/>
      <url>/2020/02/19/S%EF%BC%9A%E7%BC%96%E7%A8%8B-CSharp-Winform%E3%80%90Winform-%E5%A4%84%E7%90%86%E6%9C%AA%E5%A4%84%E7%90%86%E7%9A%84%E5%BC%82%E5%B8%B8%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>一般在Winform窗体的程序里，处理窗体未处理的异常有：  </p><blockquote><p>1.使用Application.ThreadException事件可以处理UI线程的异常<br>  2.使用Application.UnhandledException事件来处理非UI线程异常 </p></blockquote><a id="more"></a><p>案例说明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">static class Program</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 应用程序的主入口点。</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        [STAThread]</span><br><span class="line">        static void Main()</span><br><span class="line">        &#123;</span><br><span class="line">            Application.ThreadException +&#x3D; MainUIThreadExceptionHandler;    &#x2F;&#x2F;注册处理UI线程异常的方法</span><br><span class="line">            AppDomain.CurrentDomain.UnhandledException +&#x3D; MainUIUnhandledExceptionHandler;   &#x2F;&#x2F;注册处理非UI线程异常的方法</span><br><span class="line">            Application.EnableVisualStyles();</span><br><span class="line">            Application.SetCompatibleTextRenderingDefault(false);</span><br><span class="line">            Application.Run(new MainForm());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 处理应用程序的未处理异常（UI线程异常）</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;sender&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;e&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public static void MainUIThreadExceptionHandler(object sender, ThreadExceptionEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(e.Exception.Message, &quot;线程异常:&quot;, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 处理应用程序域内的未处理异常（非UI线程异常）</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;sender&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;e&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">        public static void MainUIUnhandledExceptionHandler(object sender, UnhandledExceptionEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(e.ExceptionObject.ToString(), &quot;未处理的异常:&quot;, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，只能执行一次 Application.Run代码，如果你像下面这样写代码的话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Application.Run(new SplashScreenForm());</span><br><span class="line">Application.Run(new MainForm());</span><br></pre></td></tr></table></figure><p>那么如果在MainForm出现未处理的异常（UI异常或是非UI异常），上面的异常处理程序就无法捕获了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 编程 </category>
          
          <category> C# </category>
          
          <category> WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#【WinForm】 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinForm-处理未处理的异常</title>
      <link href="/2020/02/19/S%EF%BC%9A%E7%BC%96%E7%A8%8B-CSharp-Winform%E3%80%90Winform-%E5%A4%84%E7%90%86%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%90%8E%E4%B8%8D%E4%BF%9D%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%B1%95%E7%A4%BA%E3%80%91/"/>
      <url>/2020/02/19/S%EF%BC%9A%E7%BC%96%E7%A8%8B-CSharp-Winform%E3%80%90Winform-%E5%A4%84%E7%90%86%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%90%8E%E4%B8%8D%E4%BF%9D%E5%AD%98%E7%9B%B4%E6%8E%A5%E5%B1%95%E7%A4%BA%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>最近刚刚接手公司做Winform那个同事的代码， 客户就要求在展示图片的数据表datagridview上对应的图片表格同时能展示文本信息。查了好多资料，没找到能直接通过数据表的方式加上去，后面试了一下在获取到图片后，先通过gdi对文件加上文字，然后不保存到本地直接做展示。感觉官方winform做这种很吃力😂</p><a id="more"></a><p>主要的方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private MemoryStream AddTextToImg(string text)</span><br><span class="line">        &#123;</span><br><span class="line">            MemoryStream ms &#x3D; new MemoryStream();&#x2F;&#x2F;创建一个流存储数据</span><br><span class="line">            string filePath &#x3D; Application.StartupPath + @&quot;\jgwclj.png&quot;;           </span><br><span class="line">            Image image &#x3D; Image.FromFile(filePath);</span><br><span class="line">            Bitmap bitmap &#x3D; new Bitmap(image, image.Width, image.Height);</span><br><span class="line">            System.Drawing.Graphics g &#x3D; System.Drawing.Graphics.FromImage(bitmap);</span><br><span class="line">            &#x2F;&#x2F;字体大小</span><br><span class="line">            float fontSize &#x3D; 20.0f;</span><br><span class="line">            &#x2F;&#x2F;文本的长度</span><br><span class="line">            float textWidth &#x3D; text.Length * fontSize;</span><br><span class="line">            &#x2F;&#x2F;下面定义一个矩形区域，以后在这个矩形里画上白底黑字</span><br><span class="line">            float rectX &#x3D; 10;</span><br><span class="line">            float rectY &#x3D; 50;</span><br><span class="line">            float rectWidth &#x3D; text.Length * (fontSize + 10);</span><br><span class="line">            float rectHeight &#x3D; fontSize + 10;</span><br><span class="line">            &#x2F;&#x2F;声明矩形域</span><br><span class="line">            RectangleF textArea &#x3D; new RectangleF(rectX, rectY, rectWidth, rectHeight);</span><br><span class="line">            &#x2F;&#x2F;定义字体</span><br><span class="line">            System.Drawing.Font font &#x3D; new System.Drawing.Font(&quot;微软雅黑&quot;, fontSize, System.Drawing.FontStyle.Bold);</span><br><span class="line">            &#x2F;&#x2F;font.Bold &#x3D; true;</span><br><span class="line">            &#x2F;&#x2F;白笔刷，画文字用</span><br><span class="line">            Brush whiteBrush &#x3D; new SolidBrush(System.Drawing.Color.DodgerBlue);</span><br><span class="line">            &#x2F;&#x2F;黑笔刷，画背景用</span><br><span class="line">            &#x2F;&#x2F;Brush blackBrush &#x3D; new SolidBrush(Color.Black);   </span><br><span class="line">            &#x2F;&#x2F;g.FillRectangle(blackBrush, rectX, rectY, rectWidth, rectHeight);</span><br><span class="line">            g.DrawString(text, font, whiteBrush, textArea);</span><br><span class="line">            &#x2F;&#x2F;保存到本地：将文件生成并保存到C盘</span><br><span class="line">            &#x2F;&#x2F;string path &#x3D; Application.StartupPath + @&quot;\jgwclj2.png&quot;;</span><br><span class="line">            &#x2F;&#x2F;bitmap.Save(path, System.Drawing.Imaging.ImageFormat.Png);</span><br><span class="line">            &#x2F;&#x2F;不保存到本地，先储存到内存</span><br><span class="line">            bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);</span><br><span class="line">            &#x2F;&#x2F;pictureBox1.Image &#x3D; System.Drawing.Image.FromStream(ms);</span><br><span class="line">            g.Dispose();</span><br><span class="line">            bitmap.Dispose();</span><br><span class="line">            image.Dispose();</span><br><span class="line">            return ms;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里不保存到本地的方式就是不先把图片存在MemoryStream声明的变量里，后续接受这个图片如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataGridView1[0, 0].Value &#x3D; System.Drawing.Image.FromStream(ms);&#x2F;&#x2F;DataGridViewImageColumn格里值设置为刚才存储的图片。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 编程 </category>
          
          <category> C# </category>
          
          <category> WinForm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#【WinForm】 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志</title>
      <link href="/2020/02/14/L%EF%BC%9A%E7%94%9F%E6%B4%BB-%E6%97%A5%E5%BF%97%E3%80%90%E3%80%91/"/>
      <url>/2020/02/14/L%EF%BC%9A%E7%94%9F%E6%B4%BB-%E6%97%A5%E5%BF%97%E3%80%90%E3%80%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/14/B%EF%BC%9A%E4%B9%A6%E8%AE%B0-%E6%84%9F%E6%82%9F%E3%80%90%E3%80%91/"/>
      <url>/2020/02/14/B%EF%BC%9A%E4%B9%A6%E8%AE%B0-%E6%84%9F%E6%82%9F%E3%80%90%E3%80%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 书记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
